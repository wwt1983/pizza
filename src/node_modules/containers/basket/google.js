import React, { Component } from 'react'

import { withScriptjs, withGoogleMap, GoogleMap, Marker, DirectionsRenderer } from 'react-google-maps'
import { getGooleData } from 'actions'
import { googleKey, googleAddressLink } from '../../constants'
import { googleData } from 'selectors'

import { connect } from 'react-redux'

const GoogleMapCreate = withScriptjs(withGoogleMap((props) => {
    return <GoogleMap
        defaultZoom={17}
        defaultCenter={{ lat: 55.155937, lng: 61.410854 }}
    >
        <Marker
            position={{ lat: 55.155937, lng: 61.410854 }}
        />
        {props.directions && <DirectionsRenderer directions={props.directions} />}
    </GoogleMap>
}))

const google = window.google;


class Map extends Component {
    componentWillMount() {
        this.state = {
            map: null
        }
        const {address} = this.props
        const googleAddress = address !== undefined && address !== ''  ? address.replace(',', '+').replace(' ', '+') :   'Пушкина+73'

        const { getGooleData } = this.props;
        getGooleData(googleAddressLink + googleAddress + '&alternatives=true&key=' + googleKey)
    }

    componentDidUpdate(prevProps) {
        if (prevProps.googleCoordinats !== this.props.googleCoordinats) {
    
            let coord = JSON.parse(this.props.googleCoordinats[0].coor)
            const DirectionsService = new google.maps.DirectionsService();

            DirectionsService.route({
                origin: new google.maps.LatLng(55.155937, 61.410854),
                destination: new google.maps.LatLng(coord.lat, coord.lng),
                travelMode: google.maps.TravelMode.DRIVING,
                optimizeWaypoints: true
            }, (result, status) => {
                if (status === google.maps.DirectionsStatus.OK) {
                    this.setState({
                        directions: result
                    });
                } else {
                    console.error(`error fetching directions ${result}`);
                }
            });
        }
    }

    render() {
        return (
            <GoogleMapCreate
                googleMapURL={'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=' + googleKey}
                loadingElement={<div style={{ height: `100%` }} />}
                containerElement={<div style={{ height: `400px` }} />}
                mapElement={<div style={{ height: `100%` }} />}
                directions={this.state.directions}
            />
        )
    }
}

const mapDispatchToProps = {
    getGooleData
}

const mapStateToProps = state => ({
    googleCoordinats: googleData(state)
})

export default connect(mapStateToProps, mapDispatchToProps)(Map)