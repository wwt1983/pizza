import React, { Component } from 'react';
import Message from 'containers/basket/EmailMessage'
import { connect } from 'react-redux'
import { startAddOrder } from 'actions'
import R from 'ramda'
import Divider from 'material-ui/Divider';
import TextField from 'material-ui/TextField'
import RaisedButton from 'material-ui/RaisedButton';

import Icon from 'react-icons-kit';
import { ic_done_all } from 'react-icons-kit/md/ic_done_all';

import Toggle from 'material-ui/Toggle';

import ymaps from 'ymaps';

const style = {
    marginLeft: 20,
    toggle: {
        marginBottom: 16,
        marginRight: 3
    },
    thumbOff: {
        backgroundColor: '#ffcccc'
    },
    trackOff: {
        backgroundColor: '#ff9d9d'
    },
    thumbSwitched: {
        backgroundColor: 'red'
    },
    trackSwitched: {
        backgroundColor: '#ff9d9d'
    },
    labelStyle: {
        color: 'gray'
    }
};

import { YandexDelivery } from './yandex'

class FromDelivery extends Component {
    constructor(props) {
        super(props);
        this.btnSendInfo = this.btnSendInfo.bind(this);
    }

    componentWillMount() {
        this.setState({
            address: '',
            name: '',
            phone: '',
            email: '',
            visibleStatusMessage: false,
            yaCoordinate: '',
            showAddress: false
        });
    }

    handleChange = (event, val) => {
        this.setState({ showAddress: val });
        if (!this.state.showAddress) {
            ymaps.load('https://api-maps.yandex.ru/2.1/?lang=ru_RU').then(maps => {
                //var point  = 'Челябиинск,' + e.target.value
                var point = 'Челябиинск, ' + this.state.address
                var myGeocoder = maps.geocode(point);
                myGeocoder.then((res) => {
                    console.log('myGeocoder=' + res.geoObjects.get(0).geometry.getCoordinates())
                    this.setState({
                        yaCoordinate: res.geoObjects.get(0).geometry.getCoordinates()
                    })
                }).bind(this)
            }).catch(error => console.log('Failed to load Yandex Maps', error));
        }
    };

    handleEmailChange(e) {
        this.setState({ email: e.target.value });
    }

    handlePhoneChange(e) {
        this.setState({ phone: e.target.value });
    }

    handleAddressChange(e) {
        this.setState({
            address: e.target.value,
            showAddress: false
        });
        console.log('address=' + e.target.value)
    }

    handleNameChange(e) {
        this.setState({ name: e.target.value });
    }

    handleMessageChange(e) {
        this.setState({ message: e.target.value });
    }

    btnSendInfo(event) {
        event.preventDefault();
        this.setState({
            visibleStatusMessage: true
        })
        startAddOrder(this.props.order, this.state.name, this.state.email, this.state.phone, this.state.address, this.props.price, this.state.message)
    }

    onChangeText() {
        //event.preventDefault();
    }

    render() {
        return (<div>
            {R.not(!this.state.visibleStatusMessage) && <Message />}
            <div style={{ width: 600, marginLeft: 'auto', marginRight: 'auto' }}>
                <form>
                    <TextField hintText="Розарио" style={style} underlineShow={false} fullWidth={true} id="name" value={this.state.name} required="required" onChange={(e) => this.handleNameChange(e)} />
                    <Divider />
                    <TextField hintText="Адрес (улица, дом, квартира)" fullWidth={true} underlineShow={false} id="adress" value={this.state.address} required="required" onChange={(e) => this.handleAddressChange(e)} />
                    <Toggle label='Посмотреть на карте' style={{ width: 200, fontSize: 12 }} toggled={this.state.showAddress} onToggle={this.handleChange} />
                    <Divider />
                    <Divider />
                    <TextField hintText="Email" style={style} underlineShow={false} fullWidth={true} id="email" value={this.state.email} required="required" onChange={(e) => this.handleEmailChange(e)} />
                    <Divider />
                    <TextField hintText="Телефон" style={style} underlineShow={false} id="phone" fullWidth={true} value={this.state.phone} required="required" onChange={(e) => this.handlePhoneChange(e)} />
                    <Divider />
                    <TextField hintText="Пожелания" style={style} underlineShow={false} fullWidth={true} name="message" id="message" value={this.state.message} onChange={(e) => this.handleMessageChange(e)} required="required" />
                    <Divider />
                    <br />
                    <RaisedButton label="Заказать" backgroundColor="#a4c639" icon={<Icon icon={ic_done_all} size={32} />} onClick={(e) => this.btnSendInfo(e)} />
                </form>
            </div>
            <div className='yandexMap' style={{ marginTop: 10 }}>
                <YandexDelivery userCoordinats={this.state.yaCoordinate} />
            </div>

        </div>
        )
    }
}



const mapDispatchToProps = {
    startAddOrder
}

export default connect(null, mapDispatchToProps)(FromDelivery)

