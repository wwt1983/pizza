import React, { Component } from 'react';
import Message from 'containers/basket/EmailMessage'
import { connect } from 'react-redux'
import { startAddOrder } from 'actions'
import R from 'ramda'
import TextField from 'material-ui/TextField'
import RaisedButton from 'material-ui/RaisedButton';

import Icon from 'react-icons-kit';
import { ic_done_all } from 'react-icons-kit/md/ic_done_all';

import Toggle from 'material-ui/Toggle';

import Map from '../basket/google'
import { googleData } from 'selectors'


const style = {
    marginLeft: 20,
    toggle: {
        marginBottom: 16,
        marginRight: 3
    },
    thumbOff: {
        backgroundColor: '#ffcccc'
    },
    trackOff: {
        backgroundColor: '#ff9d9d'
    },
    thumbSwitched: {
        backgroundColor: 'red'
    },
    trackSwitched: {
        backgroundColor: '#ff9d9d'
    },
    labelStyle: {
        color: 'gray'
    },
    errorStyle: {
        color: 'red'
    },
    underlineStyle: {
        borderColor: 'red'
    },
    floatingLabelStyle: {
        color: 'red'
    },
    floatingLabelFocusStyle: {
        color: 'green'
    }
};


class FromDelivery extends Component {
    constructor(props) {
        super(props);
        this.btnSendInfo = this.btnSendInfo.bind(this);
    }

    componentWillMount() {
        this.setState({
            address: '',
            name: '',
            phone: '',
            email: '',
            visibleStatusMessage: false,
            yaCoordinate: '',
            showAddress: false
        });
    }

    handleChange = (event, val) => {
        this.setState({ showAddress: val });

    };

    handleEmailChange(e) {
        this.setState({ email: e.target.value });
    }

    handlePhoneChange(e) {
        this.setState({ phone: e.target.value });
    }

    handleAddressChange(e) {
        this.setState({
            address: e.target.value,
            showAddress: false
        });
    }

    handleNameChange(e) {
        this.setState({ name: e.target.value });
    }

    handleMessageChange(e) {
        this.setState({ message: e.target.value });
    }

    btnSendInfo(event) {
        event.preventDefault();
        this.setState({
            visibleStatusMessage: true
        })
        startAddOrder(this.props.order, this.state.name, this.state.email, this.state.phone, this.state.address, this.props.price, this.state.message)
    }

    onChangeText() {
        //event.preventDefault();
    }

    render() {
        let coord = ''
        if (this.props.googleCoordinats !== undefined && this.props.googleCoordinats.length > 0) {
            for (let i = 0; i < this.props.googleCoordinats.length; i++)
                coord += ' ' + JSON.parse(this.props.googleCoordinats[i].km)
        }
        
        let map = this.state.showAddress ? (
            <div>
                <div style={{ height: 20, display: 'block' }}><b> {coord}</b> </div>
                <Map address={this.state.address} />
            </div>
        ) : null

        return (<div>
            {R.not(!this.state.visibleStatusMessage) && <Message />}
            <div style={{ width: 600, marginLeft: 'auto', marginRight: 'auto' }}>
                <form>
                    <TextField hintText="Имя" underlineFocusStyle={{ textDecorationColor: 'green' }} underlineStyle={this.state.name === '' ? style.underlineStyle : style.floatingLabelFocusStyle} fullWidth={true} id="name" value={this.state.name} onChange={(e) => this.handleNameChange(e)} />
                    <TextField hintText="Адрес (улица, дом, квартира)" fullWidth={true} id="adress" underlineStyle={this.state.address === '' ? style.underlineStyle : style.floatingLabelFocusStyle} value={this.state.address} onChange={(e) => this.handleAddressChange(e)} />
                    <Toggle label='Расстояние (км)' style={{ width: 200, fontSize: 12 }} toggled={this.state.showAddress} onToggle={this.handleChange} />
                    <TextField hintText="Email" fullWidth={true} id="email" underlineStyle={this.state.email === '' ? style.underlineStyle : style.floatingLabelFocusStyle} value={this.state.email} onChange={(e) => this.handleEmailChange(e)} />
                    <TextField hintText="Телефон" id="phone" underlineStyle={this.state.phone === '' ? style.underlineStyle : style.floatingLabelFocusStyle} fullWidth={true} value={this.state.phone} onChange={(e) => this.handlePhoneChange(e)} />
                    <TextField hintText="Пожелания" fullWidth={true} name="message" id="message" value={this.state.message} onChange={(e) => this.handleMessageChange(e)} />
                    <br />  <br />
                    <RaisedButton labelColor='#FFFFFF' label="Заказать" backgroundColor="green" icon={<Icon icon={ic_done_all} size={32} style={{ color: 'white' }} />} onClick={(e) => this.btnSendInfo(e)} />
                </form>
                <br /> <br />
            </div>

            {map}

        </div>
        )
    }
}


const mapDispatchToProps = {
    startAddOrder
}
const mapStateToProps = state => ({
    googleCoordinats: googleData(state)
})
export default connect(mapStateToProps, mapDispatchToProps)(FromDelivery)

